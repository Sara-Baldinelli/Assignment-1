1) List Comprehensions

if __name__ == '__main__':
    x = int(raw_input())
    y = int(raw_input())
    z = int(raw_input())
    n = int(raw_input())
    
    result_list = ([[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range( z + 1) if i+j+k != n ])
    print(result_list)
    
######################################################################################        
2) Find the Runner-Up Score!

if __name__ == '__main__':
    n = int(raw_input())
    arr = map(int, raw_input().split())
    new_list = list(set(arr))
    print (sorted(new_list)[-2])
    
#######################################################################################    
3) Nested Lists

if __name__ == '__main__':
    n = int(raw_input())
stud = []
for i in range(2*n):
    stud.append(raw_input().split())
grades = {}
for j in range(0, len(stud), 2):
    grades[stud[j][0]] = float(stud[j + 1][0])
result = []
num_to_match = sorted(set(grades.values()))[1]
for pupil in grades.keys():
    if grades[pupil] == num_to_match:
        result.append(pupil)
for k in sorted(result):
    print k
    
#######################################################################################    
4) Finding the percentage

if __name__ == '__main__':
    n = int(raw_input())
    student_marks = {}
    for _ in range(n):
        line = raw_input().split()
        name, scores = line[0], line[1:]
        scores = map(float, scores)
        student_marks[name] = scores
    query_name = raw_input()
    
    marks = 0
    for i in student_marks[query_name]:
        marks = marks + i
    average = marks / 3
    print("%.2f" % average) #"%.2f" because we want to print the average with just two decimal digits

#########################################################################################
5) Tuples

if __name__ == '__main__':
    n = int(raw_input())
    integer_list = map(int, raw_input().split())
    
    #I make a tuple (t) of the integer list
    t = tuple(integer_list) 
    
    #I compute and print the result of hash(t)
    print(hash(t))
