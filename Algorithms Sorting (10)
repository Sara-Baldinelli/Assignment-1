1) Big Sorting

def bigSorting(unsorted):
    numb = list()
    for i in sorted(unsorted, key=int):
        numb.append(i)
    return(numb)
    
######################################################################
2) Intro to Tutorial Challenges

def introTutorial(V, arr):
    return(int(arr.index(V)))
    
######################################################################
3) Insertion Sort - Part 1

def insertionSort1(n, arr):
    target = arr[-1] 
    index = n-1 
    while index>0 and arr [index-1] > target:
        arr[index] = arr[index-1]  
        print(*arr) 
        index -= 1 
    arr[index] = target 
    print(*arr)
   
######################################################################
4) Insertion Sort - Part 2

def insertionSort2(n, arr):
    for i in range(1,n):
        track = i-1
        count = arr[i]
        while(track >= 0 and arr[track] > count):
            arr[track + 1] = arr[track]
            track = track - 1 
            arr[track + 1] = count
        print(*arr)
        
######################################################################
5) Correctness and the Loop Invariant

def insertion_sort(l):
    for i in range(1, len(l)):
        j = i-1
        key = l[i]
        while (j>=0) and (l[j] > key):
           l[j+1] = l[j]
           j -= 1
        l[j+1] = key

m = int(input().strip())
ar = [int(i) for i in input().strip().split()]
insertion_sort(ar)
print(" ".join(map(str,ar)))

######################################################################
6) Running Time of Algorithms

def runningTime(arr):
    shifts = 0
    for i in range(n): 
        for j in range(i + 1, n): 
            if (arr[i] > arr[j]): 
                shifts += 1
            else:
                shifts = shifts
    return(shifts)
    
######################################################################
7) Quicksort 1 - Partition

def quickSort(arr):
    return sorted(arr)
 
######################################################################
8) Counting Sort 1

def countingSort(arr):
    INTEGER_ARRAY = [0] * 100
    for numb in arr:
        INTEGER_ARRAY[numb] += 1
    return(INTEGER_ARRAY)
    
######################################################################
9) Counting Sort 2

def countingSort(arr):
    INTEGER_ARRAY = []
    for numb in arr:
        INTEGER_ARRAY.append(numb)
    return(sorted(INTEGER_ARRAY))

######################################################################
10) Find the Median

def findMedian(arr):
    import statistics
    return(statistics.median(arr))
    
######################################################################
